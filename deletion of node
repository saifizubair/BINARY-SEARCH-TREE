

import java.io.*;
import java.lang.*;
import java.util.*;


public class Main {
    public static void main(String[] args) {
        abc tree =new abc();
        tree.add(11);
        tree.add(6);
        tree.add(8);
        tree.add(19);
        tree.add(4);
        tree.add(10);
        tree.add(5);
        tree.preorder(tree.root);
        tree.remove(tree.root, 8);
        System.out.println();
        tree.preorder(tree.root);

    }

}
class node {
    int data;
    node left;
    node right;

    public node(int data) {
        this.data = data;
        this.left=null;
        this.right=null;
    }
}
class  abc {
    public node root =null;
    public node addrecursive(node node , int value){
        if (node==null){
            return new node(value);
        }
        else if (value<node.data){
            node.left =addrecursive(node.left,value);
        }
        else if (value>node.data){
            node.right =addrecursive(node.right,value);
        }
            return node;
    }
    public void add(int value){
        root =addrecursive(root ,value);
    }
    public node remove(node node,int value){
        if (node==null){
            return node;
        }
        if (value<node.data){
            node.left =remove(node.left,value);
        }
        else if (value>node.data){
            node.right =remove(node.right,value);
        }
        else {
            if (node.left==null){
                return node.right;
            }
            else if (node.right==null)
                return node.left;
           node.data =minvalue(node.right);
           node.right= remove(node.right,node.data);
        }
        return node;
    }
    static int minvalue(node node){
        int min =node.data;
        while (node.left!=null){
            min =node.left.data;
            node =node.left;
        }
        return min;
    }
    static void preorder(node node ){
        if (node==null){
            return;
        }
      System.out.print(node.data+" ");
        preorder(node.left);
        preorder(node.right);
    }
}
