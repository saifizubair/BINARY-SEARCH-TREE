package com.company;


import java.io.*;
import java.lang.*;
import java.sql.*;
import java.util.Scanner;
import java.util.Stack;


public class Main {
    public static void main(String[]args)  {
        abc tree =new abc();
        tree.insert(8);
        tree.insert(3);
        tree.insert(6);
        tree.insert(10);
        tree.insert(4);
        tree.insert(7);
        tree.insert(1);
        tree.insert(14);
        tree.insert(13);
        tree.zigzag(tree.root);
    }
}
class node {
    int data;
    node left;
    node right;

    public node(int data) {
        this.data = data;
        this.left=null;
        this.right=null;
    }
}
class abc{
    public node root;
    public node addrecursive(node node ,int data){
        if (node==null){
            return new node(data);
        }
      else  if (data<node.data){
            node.left= addrecursive(node.left,data);
        }
      else if (data>node.data){
          node.right =addrecursive(node.right,data);
        }
      else {
          return node;
        }
      return node;
    }
    public void insert(int data){
         root =addrecursive(root,data);
    }
    public void zigzag(node node){
        if (node==null){
            return;
        }
        Stack<node>currlevel=new Stack<>();
        Stack<node>nexlevel=new Stack<>();
        boolean lefttoright=true;
        currlevel.push(root);
        while (!currlevel.empty()){
        node temp=  currlevel.pop();
        System.out.print(temp.data+" ");
        if (lefttoright==true){
            if (temp.left!=null){
                nexlevel.push(temp.left);
            }
                if (temp.right!=null){
                    nexlevel.push(temp.right);
                }
            }
            else {
                if (temp.right!=null){
                    nexlevel.push(temp.right);
                }
                if (temp.left!=null){
                    nexlevel.push(temp.left);
                }
            }
            if (currlevel.empty()){
                lefttoright=!lefttoright;
                Stack<node>temp1 =currlevel;
                currlevel=nexlevel;
                nexlevel=temp1;
            }
        }

    }
}
